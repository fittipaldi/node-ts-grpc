// @generated by protobuf-ts 2.9.4 with parameter client_grpc1
// @generated from protobuf file "demo.proto" (package "demo", syntax proto3)
// tslint:disable
import { DemoService } from "./demo";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { DemosResponse } from "./demo";
import type { Empty } from "./demo";
import type { DemoResponse } from "./demo";
import type { DemoRequest } from "./demo";
import * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service demo.DemoService
 */
export interface IDemoServiceClient {
    /**
     * @generated from protobuf rpc: CreateDemo(demo.DemoRequest) returns (demo.DemoResponse);
     */
    createDemo(input: DemoRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: DemoResponse) => void): grpc.ClientUnaryCall;
    createDemo(input: DemoRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: DemoResponse) => void): grpc.ClientUnaryCall;
    createDemo(input: DemoRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: DemoResponse) => void): grpc.ClientUnaryCall;
    createDemo(input: DemoRequest, callback: (err: grpc.ServiceError | null, value?: DemoResponse) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: GetDemos(demo.Empty) returns (demo.DemosResponse);
     */
    getDemos(input: Empty, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: DemosResponse) => void): grpc.ClientUnaryCall;
    getDemos(input: Empty, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: DemosResponse) => void): grpc.ClientUnaryCall;
    getDemos(input: Empty, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: DemosResponse) => void): grpc.ClientUnaryCall;
    getDemos(input: Empty, callback: (err: grpc.ServiceError | null, value?: DemosResponse) => void): grpc.ClientUnaryCall;
}
/**
 * @generated from protobuf service demo.DemoService
 */
export class DemoServiceClient extends grpc.Client implements IDemoServiceClient {
    private readonly _binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions>;
    constructor(address: string, credentials: grpc.ChannelCredentials, options: grpc.ClientOptions = {}, binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions> = {}) {
        super(address, credentials, options);
        this._binaryOptions = binaryOptions;
    }
    /**
     * @generated from protobuf rpc: CreateDemo(demo.DemoRequest) returns (demo.DemoResponse);
     */
    createDemo(input: DemoRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: DemoResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: DemoResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: DemoResponse) => void)): grpc.ClientUnaryCall {
        const method = DemoService.methods[0];
        return this.makeUnaryRequest<DemoRequest, DemoResponse>(`/${DemoService.typeName}/${method.name}`, (value: DemoRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): DemoResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: GetDemos(demo.Empty) returns (demo.DemosResponse);
     */
    getDemos(input: Empty, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: DemosResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: DemosResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: DemosResponse) => void)): grpc.ClientUnaryCall {
        const method = DemoService.methods[1];
        return this.makeUnaryRequest<Empty, DemosResponse>(`/${DemoService.typeName}/${method.name}`, (value: Empty): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): DemosResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
}
